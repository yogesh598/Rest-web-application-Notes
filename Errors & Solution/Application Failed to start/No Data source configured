***************************
APPLICATION FAILED TO START
***************************

Description:
Failed to configure a DataSource: 'url' attribute is not specified and no embedded datasource could be configured.
Reason: Failed to determine a suitable driver clas

Now, suppose we have a Spring Boot project, and we've added the spring-data-starter-jpa dependency and a MySQL JDBC driver to our pom.xml:
But, when we run the application, it fails with the error: APPLICATION FAILED TO START

The Cause :
By design, Spring Boot auto-configuration tries to configure the beans automatically based on the dependencies added to the classpath.
And, since we have the JPA dependency on our classpath, Spring Boot tries to automatically configure a JPA DataSource.

The problem is, we haven't given Spring the information it needs to perform the auto-configuration.
For example, we haven't defined any JDBC connection properties, and we'll need to do so when working with external databases like MySQL and MSSQL.
On the other hand, we won't face this issue with in-memory databases like H2 since they can create a data source without all this information.

Solutions :
1)Define the DataSource Using Properties:

        Since the issue occurs due to the missing database connection, we can solve the problem simply by providing the data source properties.
        First, letâ€™s define the data source properties in the application.properties file of our project:

        spring.datasource.url=jdbc:mysql://localhost:3306/databasename
        spring.datasource.username=username of database
        spring.datasource.password=password of database
        spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

        Or, we can provide the data source properties in application.yml:
        spring:
          datasource:
            driverClassName: com.mysql.cj.jdbc.Driver
            url: jdbc:mysql://localhost:3306/myDb
            username: user1
            password: pass
    
2) Define the DataSource Programmatically :
          Alternatively, we can define our data source programmatically, by using the utility builder class DataSourceBuilder. We need to provide the database URL, username, password, and the SQL driver information to create our data source:

          @Configuration
          public class DatasourceConfig {
              @Bean
              public DataSource datasource() {
                  return DataSourceBuilder.create()
                    .driverClassName("com.mysql.cj.jdbc.Driver")
                    .url("jdbc:mysql://localhost:3306/myDb")
                    .username("user1")
                    .password("pass")
                    .build();	
              }
          }
          
   3) Exclude DataSourceAutoConfiguration:
            In the previous section, we fixed the issue by adding the data source properties to our project. But, how do we solve this if we're not yet ready to define our data source?

              Let's see how to prevent Spring Boot from auto-configuring the data source.
              The class DataSourceAutoConfiguration is the base class for configuring a data source using the spring.datasource.* properties.
              Now, there are a few ways that we can exclude this from the auto-configuration.
              First, we can disable the auto-configuration using the spring.autoconfigure.exclude property in our application.properties file:

              <!--code-->    spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration
             
             Likewise, we can do the same using our application.yml file:

              <!--code-->       spring:
                                autoconfigure:
                                  exclude:
                                  - org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration
                                  
              Or, we can use the exclude attribute on our @SpringBootApplication or @EnableAutoConfiguration annotation:

              <!--code-->         @SpringBootApplication(exclude={DataSourceAutoConfiguration.class})
              
              In all the above examples, we disabled the auto-configuration of the DataSource. And, this will not affect auto-configuring any other beans.
